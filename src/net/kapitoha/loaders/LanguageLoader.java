package net.kapitoha.loaders;

import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Properties;

import net.kapitoha.utils.CommonUtilities;

/**
 * 
 * @author Kapitoha
 * 
 */
public class LanguageLoader {
    private static final File languageFilePath = new File(Paths.get(
	    CommonUtilities.getJarsLocation().toString(), "data",
	    "lang.xml").toString());
    /** Don't panic!!! It's an emergency lang.xml in a byte array shape. */
    private static final byte[] langFile = { 60, 63, 120, 109, 108, 32, 118,
	    101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 32, 101, 110,
	    99, 111, 100, 105, 110, 103, 61, 34, 85, 84, 70, 45, 56, 34, 63,
	    62, 10, 60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 112, 114, 111, 112,
	    101, 114, 116, 105, 101, 115, 32, 83, 89, 83, 84, 69, 77, 32, 34,
	    104, 116, 116, 112, 58, 47, 47, 106, 97, 118, 97, 46, 115, 117,
	    110, 46, 99, 111, 109, 47, 100, 116, 100, 47, 112, 114, 111, 112,
	    101, 114, 116, 105, 101, 115, 46, 100, 116, 100, 34, 62, 10, 60,
	    112, 114, 111, 112, 101, 114, 116, 105, 101, 115, 62, 10, 9, 60,
	    33, 45, 45, 32, 84, 105, 116, 108, 101, 115, 32, 45, 45, 62, 10, 9,
	    60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 116, 105,
	    116, 108, 101, 95, 109, 97, 105, 110, 34, 62, 70, 105, 108, 101,
	    32, 83, 111, 114, 116, 101, 114, 60, 47, 101, 110, 116, 114, 121,
	    62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34,
	    116, 105, 116, 108, 101, 95, 99, 111, 110, 102, 105, 103, 34, 62,
	    70, 105, 108, 101, 32, 83, 111, 114, 116, 101, 114, 60, 47, 101,
	    110, 116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32,
	    107, 101, 121, 61, 34, 116, 105, 116, 108, 101, 95, 101, 120, 112,
	    97, 110, 115, 105, 111, 110, 95, 109, 110, 103, 114, 34, 62, 70,
	    105, 108, 101, 32, 101, 120, 112, 97, 110, 115, 105, 111, 110, 32,
	    109, 97, 110, 97, 103, 101, 114, 60, 47, 101, 110, 116, 114, 121,
	    62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34,
	    116, 105, 116, 108, 101, 95, 119, 97, 114, 110, 105, 110, 103, 34,
	    62, 87, 97, 114, 110, 105, 110, 103, 60, 47, 101, 110, 116, 114,
	    121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61,
	    34, 116, 105, 116, 108, 101, 95, 105, 110, 112, 117, 116, 95, 110,
	    97, 109, 101, 34, 62, 73, 110, 112, 117, 116, 32, 110, 97, 109,
	    101, 60, 47, 101, 110, 116, 114, 121, 62, 10, 10, 9, 60, 33, 45,
	    45, 32, 77, 101, 110, 117, 32, 99, 97, 115, 101, 32, 45, 45, 62,
	    10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 109,
	    101, 110, 117, 95, 111, 116, 104, 101, 114, 34, 62, 79, 116, 104,
	    101, 114, 60, 47, 101, 110, 116, 114, 121, 62, 10, 9, 60, 101, 110,
	    116, 114, 121, 32, 107, 101, 121, 61, 34, 109, 101, 110, 117, 95,
	    111, 112, 116, 105, 111, 110, 115, 34, 62, 79, 112, 116, 105, 111,
	    110, 115, 60, 47, 101, 110, 116, 114, 121, 62, 10, 9, 60, 101, 110,
	    116, 114, 121, 32, 107, 101, 121, 61, 34, 109, 101, 110, 117, 95,
	    101, 120, 112, 97, 110, 115, 105, 111, 110, 95, 109, 97, 110, 97,
	    103, 101, 114, 34, 62, 69, 120, 112, 97, 110, 115, 105, 111, 110,
	    32, 109, 97, 110, 97, 103, 101, 114, 60, 47, 101, 110, 116, 114,
	    121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61,
	    34, 109, 101, 110, 117, 95, 101, 120, 105, 116, 34, 62, 69, 120,
	    105, 116, 32, 112, 114, 111, 103, 114, 97, 109, 60, 47, 101, 110,
	    116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107,
	    101, 121, 61, 34, 109, 101, 110, 117, 95, 100, 97, 110, 103, 101,
	    114, 34, 62, 68, 65, 78, 71, 69, 82, 32, 90, 79, 78, 69, 60, 47,
	    101, 110, 116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121,
	    32, 107, 101, 121, 61, 34, 100, 101, 108, 101, 116, 101, 95, 100,
	    98, 34, 62, 68, 101, 108, 101, 116, 101, 32, 100, 97, 116, 97, 98,
	    97, 115, 101, 60, 47, 101, 110, 116, 114, 121, 62, 10, 10, 9, 60,
	    33, 45, 45, 32, 66, 117, 116, 116, 111, 110, 115, 32, 45, 45, 62,
	    10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 98,
	    117, 116, 116, 111, 110, 95, 110, 101, 119, 95, 116, 97, 114, 103,
	    101, 116, 34, 62, 65, 100, 100, 32, 110, 101, 119, 32, 84, 97, 114,
	    103, 101, 116, 60, 47, 101, 110, 116, 114, 121, 62, 10, 9, 60, 101,
	    110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 98, 117, 116, 116,
	    111, 110, 95, 115, 111, 114, 116, 34, 62, 83, 111, 114, 116, 60,
	    47, 101, 110, 116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114,
	    121, 32, 107, 101, 121, 61, 34, 98, 117, 116, 116, 111, 110, 95,
	    101, 120, 105, 116, 34, 62, 69, 120, 105, 116, 60, 47, 101, 110,
	    116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107,
	    101, 121, 61, 34, 98, 117, 116, 116, 111, 110, 95, 99, 111, 110,
	    102, 105, 103, 34, 62, 67, 111, 110, 102, 105, 103, 60, 47, 101,
	    110, 116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32,
	    107, 101, 121, 61, 34, 98, 117, 116, 116, 111, 110, 95, 100, 101,
	    108, 101, 116, 101, 34, 62, 68, 101, 108, 101, 116, 101, 60, 47,
	    101, 110, 116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121,
	    32, 107, 101, 121, 61, 34, 98, 117, 116, 116, 111, 110, 95, 101,
	    100, 105, 116, 34, 62, 69, 100, 105, 116, 60, 47, 101, 110, 116,
	    114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101,
	    121, 61, 34, 98, 117, 116, 116, 111, 110, 95, 99, 108, 111, 115,
	    101, 34, 62, 67, 108, 111, 115, 101, 60, 47, 101, 110, 116, 114,
	    121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61,
	    34, 98, 117, 116, 116, 111, 110, 95, 99, 104, 97, 110, 103, 101,
	    34, 62, 67, 104, 97, 110, 103, 101, 60, 47, 101, 110, 116, 114,
	    121, 62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61,
	    34, 98, 117, 116, 116, 111, 110, 95, 114, 101, 115, 101, 116, 34,
	    62, 82, 101, 115, 101, 116, 60, 47, 101, 110, 116, 114, 121, 62,
	    10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 98,
	    117, 116, 116, 111, 110, 95, 97, 100, 100, 95, 102, 105, 108, 116,
	    101, 114, 34, 62, 67, 114, 101, 97, 116, 101, 32, 110, 101, 119,
	    32, 102, 105, 108, 116, 101, 114, 60, 47, 101, 110, 116, 114, 121,
	    62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34,
	    98, 117, 116, 116, 111, 110, 95, 97, 112, 112, 108, 121, 34, 62,
	    65, 112, 112, 108, 121, 60, 47, 101, 110, 116, 114, 121, 62, 10, 9,
	    60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 98, 117,
	    116, 116, 111, 110, 95, 99, 97, 110, 99, 101, 108, 34, 62, 67, 97,
	    110, 99, 101, 108, 60, 47, 101, 110, 116, 114, 121, 62, 10, 10, 9,
	    60, 33, 45, 45, 32, 76, 97, 98, 101, 108, 115, 32, 45, 45, 62, 10,
	    9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 108, 97,
	    98, 95, 99, 117, 114, 114, 101, 110, 116, 95, 102, 111, 108, 100,
	    101, 114, 34, 62, 89, 111, 117, 114, 32, 99, 117, 114, 114, 101,
	    110, 116, 32, 116, 97, 114, 103, 101, 116, 32, 102, 111, 108, 100,
	    101, 114, 32, 112, 97, 116, 104, 60, 47, 101, 110, 116, 114, 121,
	    62, 10, 9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34,
	    108, 97, 98, 95, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111,
	    110, 34, 62, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110,
	    58, 32, 60, 47, 101, 110, 116, 114, 121, 62, 10, 10, 9, 60, 33, 45,
	    45, 32, 79, 112, 116, 105, 111, 110, 115, 32, 45, 45, 62, 10, 9,
	    60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 121, 101,
	    115, 34, 62, 89, 101, 115, 60, 47, 101, 110, 116, 114, 121, 62, 10,
	    9, 60, 101, 110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 110,
	    111, 34, 62, 78, 111, 60, 47, 101, 110, 116, 114, 121, 62, 10, 10,
	    9, 60, 33, 45, 45, 32, 83, 101, 114, 118, 105, 99, 101, 32, 109,
	    101, 115, 115, 97, 103, 101, 115, 32, 45, 45, 62, 10, 9, 60, 101,
	    110, 116, 114, 121, 32, 107, 101, 121, 61, 34, 109, 115, 103, 95,
	    99, 111, 110, 102, 105, 114, 109, 95, 100, 101, 108, 101, 116, 101,
	    95, 100, 98, 34, 62, 10, 9, 9, 84, 104, 105, 115, 32, 111, 112,
	    116, 105, 111, 110, 32, 97, 108, 108, 111, 119, 115, 32, 121, 111,
	    117, 32, 116, 111, 32, 100, 101, 108, 101, 116, 101, 10, 9, 9, 121,
	    111, 117, 114, 32, 100, 97, 116, 97, 98, 97, 115, 101, 32, 97, 110,
	    100, 32, 115, 101, 116, 32, 97, 108, 108, 10, 9, 9, 115, 101, 116,
	    116, 105, 110, 103, 115, 32, 116, 111, 32, 100, 101, 102, 97, 117,
	    108, 116, 46, 10, 9, 9, 40, 89, 111, 117, 32, 119, 105, 108, 108,
	    32, 108, 111, 115, 101, 32, 97, 108, 108, 32, 121, 111, 117, 114,
	    32, 115, 101, 116, 116, 105, 110, 103, 115, 41, 10, 9, 9, 65, 114,
	    101, 32, 121, 111, 117, 32, 115, 117, 114, 101, 63, 10, 9, 60, 47,
	    101, 110, 116, 114, 121, 62, 10, 9, 60, 101, 110, 116, 114, 121,
	    32, 107, 101, 121, 61, 34, 109, 115, 103, 95, 99, 97, 110, 110,
	    111, 116, 95, 114, 109, 95, 100, 98, 34, 62, 10, 9, 9, 72, 109, 46,
	    46, 46, 32, 73, 32, 99, 97, 110, 110, 111, 116, 32, 114, 101, 109,
	    111, 118, 101, 32, 100, 97, 116, 97, 98, 97, 115, 101, 46, 46, 46,
	    10, 9, 9, 77, 97, 121, 32, 98, 101, 32, 105, 116, 32, 119, 97, 115,
	    32, 114, 101, 109, 111, 118, 101, 100, 32, 109, 97, 110, 117, 97,
	    108, 108, 121, 63, 10, 9, 9, 73, 102, 32, 121, 111, 117, 32, 100,
	    105, 100, 110, 39, 116, 32, 116, 104, 105, 115, 44, 10, 9, 9, 116,
	    114, 121, 32, 116, 111, 32, 114, 101, 109, 111, 118, 101, 32, 105,
	    116, 32, 109, 97, 110, 117, 97, 108, 108, 121, 32, 97, 116, 58, 10,
	    9, 60, 47, 101, 110, 116, 114, 121, 62, 10, 9, 60, 101, 110, 116,
	    114, 121, 32, 107, 101, 121, 61, 34, 109, 115, 103, 95, 105, 110,
	    112, 117, 116, 95, 110, 97, 109, 101, 34, 62, 73, 110, 112, 117,
	    116, 32, 110, 101, 119, 32, 102, 105, 108, 116, 101, 114, 39, 115,
	    32, 110, 97, 109, 101, 60, 47, 101, 110, 116, 114, 121, 62, 10, 60,
	    47, 112, 114, 111, 112, 101, 114, 116, 105, 101, 115, 62 };
    
    private static Properties language;

    public static Properties getLanguage()
    {
	Properties properties = new Properties();
	if (null != language)
	    return language;
	else
	{
	    if (!languageFilePath.exists())
	    {
		createLangXml();
	    }
	    try (FileInputStream fin = new FileInputStream(languageFilePath))
	    {
		// StringBuilder sb = new StringBuilder();
		// int c = 0;
		// byte[] buf = new byte[fin.available()];
		// while ((c=fin.read(buf)) != -1)
		// {
		// sb.append(new String(buf, 0, c));
		// }
		// byte[] bb = sb.toString().getBytes();
		// System.out.println(Arrays.toString(bb));
		properties.loadFromXML(fin);
	    }
	    catch (IOException e)
	    {
		try
		{
		    properties.loadFromXML(new ByteArrayInputStream(langFile));
		}
		catch (IOException e1)
		{
		    System.err.println("Cannot read lang.xml");
		}
	    }
	}
	return properties;
    }

    private static void createLangXml()
    {
	Charset charset = Charset.forName("UTF-8");
	try (BufferedWriter out = Files.newBufferedWriter(
		languageFilePath.toPath(), charset,
		StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW))
	{
	    out.write(new String(langFile, charset));
	    out.flush();
	}
	catch (IOException e)
	{
	    System.err.println("cannot write lang.xml");
	}

    }

}
